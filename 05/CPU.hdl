// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15],out=AC);
    // Flip the first bit of the instruction

    Mux16(a=outALU,b=instruction,sel=AC,out=intoA);
    // used to direct input as instruction(A-instruction) or output of ALU(C-instruction) to input of A-Register
    // opcode=0(A-instruction),opcode=1(C-instruction)

    Or(a=AC, b=instruction[5], out=TD1);
    // input is loaded into A-Register if AC=0(A-instruction) or AC=1(C-instruction) and D1=1(A-Register is dest)
    // using useful law x+(x'.y)=x+y

    ARegister(in=intoA, load=TD1 ,out=A, out[0..14]=addressM); 
    // output of ALU or instruction is loaded in A
    // stores data or address to which we want to write or read

    And(a=instruction[15], b=instruction[12], out=AorM);
    // if 13th bit in instruction is 1 inM is loaded in ALU else A-Register is loaded

    Mux16(a=A, b=inM, sel=AorM , out=intoALU);
    //output of this mux gives input to ALU

    ALU(x=D, y=intoALU, zx=instruction[11], nx=instruction[10],
    zy=instruction[9], ny=instruction[8], f=instruction[7],
    no=instruction[6], zr=zr, ng=ng, out=outALU, out=outM);
    // arithmetic and logic operations are done here
    // 6 computation bits with 64 different combinations does these operations
    // 2 output bits zr and ng are used in flow control

    And(a=instruction[15], b=instruction[4], out=intoD);
    // Used to check if D is supposed to be written 

    DRegister(in=outALU, load=intoD, out=D);
    // D-Register stores data

    And(a=instruction[15], b=instruction[3], out=writeM);
    // Used to write to M register 

    Not(in=ng,out=positive);
    Not(in=zr,out=gtzero);
    
    //conditional jump
    //instruction[15] is used to check if its C-instruction to perform jump
    And(a=instruction[15],b=instruction[0],out=jgt);  
    And(a=positive,b=gtzero,out=posgtz);
    And(a=jgt,b=posgtz,out=jmp1);
    
    And(a=instruction[15],b=instruction[1],out=jeq);    
    And(a=jeq,b=zr,out=jmp2);
    
    And(a=instruction[15],b=instruction[2],out=jlt);    
    And(a=jlt,b=ng,out=jmp3);
    
    //checking if load is true
    Or(a=jmp1,b=jmp2,out=jm);
    Or(a=jmp3,b=jm,out=jmp);

    PC (in=A,load=jmp,inc=true,reset=reset,out[0..14]=pc);
    //priority order reset>load>inc
    // fetches new instruction
}